const { hm, cfg, logger, players, io, time, vk, settings } = require('./vk.index');
const fs = require('fs');
const os = require('os');

// üë• - 1 –£—Ä–æ–≤–µ–Ω—å
// üî• - 2 –£—Ä–æ–≤–µ–Ω—å
// üåÄ - 3 –£—Ä–æ–≤–µ–Ω—å
// üåå - 4 –£—Ä–æ–≤–µ–Ω—å
// ‚öô - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
const LEVELS = ['üë•', 'üî•', 'üåÄ', 'üåå', '‚öô'];
let CMD = JSON.parse(fs.readFileSync(`./commands.json`, { encoding: "utf-8"}));
CMD = CMD.sort((a, b) => {
    return a.level - b.level;
});
let CMDS = `‚ùó –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ [${CMD.length}]:\n`;
for(let item of CMD){
    CMDS += `[${LEVELS[item.level]}] `;
    CMDS += `${item.text} `;
    CMDS += (item.argv) ? `[${item.argv}] ` : '';
    CMDS += `- ${item.desc}\n`;
}
CMDS += `\n$ - –ù–µ–æ–±—è–∑.–∞—Ä–≥—É–º–µ–Ω—Ç\n`;
CMDS += `* - –û–±—è–∑.–∞—Ä–≥—É–º–µ–Ω—Ç\n`;
CMDS += `@ - –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n`;
CMDS += `üë• - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –≤—ã—à–µ\n`;
CMDS += `üî• - –£—Ä–æ–≤–µ–Ω—å 2 –∏ –≤—ã—à–µ\n`;
CMDS += `üåÄ - –£—Ä–æ–≤–µ–Ω—å 3 –∏ –≤—ã—à–µ\n`;
CMDS += `üåå - –£—Ä–æ–≤–µ–Ω—å 4 –∏ –≤—ã—à–µ\n`;
CMDS += `‚öô - –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n`;

hm.hear(/^\/cmd/i, (ctx) => {
    return ctx.send(CMDS);
});

hm.hear(/^\/check/i, async (ctx) => {
    let uptime = formatUptime(process.uptime());
    let info = JSON.parse(fs.readFileSync('./package.json'));
    let used = Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let total = Math.round(process.memoryUsage().heapTotal / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let rss = Math.round(process.memoryUsage().rss / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let ext = Math.round(process.memoryUsage().external / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let ping = (time() - time(ctx.createdAt*1000))/1000;
    let OSMF = Math.round(os.freemem() / 1024 / 1024 / 1024 * 100) / 100;
    let OSMT = Math.round(os.totalmem() / 1024 / 1024 / 1024 * 100) / 100;
    let message = `‚öô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n`;
    message += `> Version: ${info.version}\n`;
    message += `> Name: KBot\n\n`;
    message += `> Time: ${time().format('HH:mm:ss')}\n`;
    message += `> Date: ${time().format('DD.MM.YYYY')}\n`;
    message += `> Uptime: ${uptime}\n`;
    message += `> Ping: ${ping} —Å–µ–∫\n\n`;
    message += `> Used: ${used}\n`;
    message += `> Total: ${total}\n`;
    message += `> RSS: ${rss}\n`;
    message += `> EXT: ${ext}\n\n`;
    message += `> OSMU: ${(OSMT - OSMF).toFixed(2)} –ì–±\n`;
    message += `> OSMF: ${OSMF} –ì–±\n`;
    message += `> OSMT: ${OSMT} –ì–±\n`;
    return ctx.send(message);
});

hm.hear(/^\/register( )?([0-9]+)?( )?([\w\W]+)?/i, async (ctx) => {
    try {
        if(ctx.peerType != 'user'){ return ctx.send(`‚ùó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ [club${ctx.$groupId}|–õ–° –ë–æ—Ç—É]`); }
        if(ctx.info){return ctx.send(`‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ –±–æ—Ç–µ!`);}
        if(!ctx.$match[2]){ return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ ID –∏–∑ Lesya!`); }
        if(!ctx.$match[4]){ return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –∏–∑ Lesya!`);}
        let password = Math.random().toString(36).replace('.','') + Math.random().toString(36).replace('.','');
        await players.addNew({
            vkId: ctx.senderId,
            password: password,
            lesya: ctx.$match[2],
            nick: ctx.$match[4]
        });
        let message = `üåå ${ctx.vk.first_name} ${ctx.vk.last_name} –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ!\n`;
        message += `‚öô –õ–æ–≥–∏–Ω: ${ctx.senderId}\n`;
        message += `‚öô –ü–∞—Ä–æ–ª—å: ${password}\n\n`;
        message += `‚öô LesyaID: ${ctx.$match[2]}\n`;
        message += `‚öô LesyaNick: ${ctx.$match[4]}\n\n`;
        message += `‚ùó –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ!\n`;
        message += `‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ!`;
        logger.info.app(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.vk.first_name} ${ctx.vk.last_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ!`);
        return ctx.send(message);
    } catch (error) {
        logger.error.vk(`VK: /register: ${error.message}`);
        return ctx.send(`‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: vk_reg_error`);
    }
});

hm.hear(/^\/stuff/i, async (ctx) => {
    try {
        let admins = await players.getAdmins();
        if(!admins){ return ctx.send(`‚ùó –£–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`); }
        let message = `üåå –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –±–µ—Å–µ–¥—ã:\n\n`;
        for(let i = 0; i < admins.length; i++){
            let user = await vk.api.users.get({ user_ids: admins[i].vkId });
            message += `[${LEVELS[admins[i].level]}] ${user[0].first_name} ${user[0].last_name}\n`;
        }
        return ctx.send(message);
    } catch(error){
        logger.error.vk(`VK: UsersCMD: /stuff: ${error.message}`);
        return ctx.send(`‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: vk_stuff_error`);
    }
});

hm.hear(/^\/textad( )?/i, async (ctx) => {
    if(ctx.$match[1]){return 1;}
    try {
        let message = await settings.adText();
        message = message ? message : '‚ùó –°—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
        return ctx.send(message, { dont_parse_links: true });
    } catch(error){
        logger.error.vk(`[/textad] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: get_textad_error`);
    }
});

hm.hear(/^\/lesya( )?/i, async (ctx) => {
    if(ctx.$match[1]){return 1;}
    try {
        let message = `üåå –ö–∏–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É —Å—é–¥–∞:\n`;
        let lesya = await settings.lesyaLink();
        lesya = lesya ? lesya : '‚ùó –°—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
        message += lesya;
        return ctx.send(message, { dont_parse_links: true });
    } catch(error){
        logger.error.vk(`[/lesya] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: get_lesya_error`);
    }
});

hm.hear(/^\/link( )?/i, async (ctx) => {
    if(ctx.$match[1]){return 1;}
    try {
        let message = `üåå –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:\n`;
        let link = await settings.chatLink();
        link = link ? link : '‚ùó –°—Å—ã–ª–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!';
        message += link;
        return ctx.send(message, { dont_parse_links: true });
    } catch(error){
        logger.error.vk(`[/link] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: get_link_error`);
    }
});

function formatUptime (time){
    function pad(s){
        return (s < 10 ? '0' : '') + s;
    }
    let hours = Math.floor(time / (60*60));
    let minutes = Math.floor(time % (60*60) / 60);
    let seconds = Math.floor(time % 60);
    return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds);
}
