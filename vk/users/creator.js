const { vk, cfg, logger, utils, hm, promo, battles, wars } = require('../vk.index');
const { VK, Keyboard } = require('vk-io');
const { HearManager } = require('@vk-io/hear');
const user = new VK({ token: cfg.vk.users.creator.token });
const countdown = require('countdown');
const cmd = new HearManager();
const time = require('moment');
time.locale('ru');

user.updates.start();
user.updates.on('message_new', async (ctx, next) => {
	if(ctx.peerId != cfg.vk.users.creator.peerId){return 1;}
	if(ctx.senderId == cfg.vk.lesyaId){
		try {
			if(/–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∫–ª–∞–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–π –≤–æ–π–Ω–µ!/gim.test(ctx.text)){
				let end = time(ctx.createdAt*1000).format('HH:mm:ss, DD.MM.YYYY');
				let top = await battles.getTop();
				if(top){
					let message = `üåå –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüò• –ú—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\n\n`;
					message += `‚öî –ë–æ—ë–≤: ${top.all}\n`;
					message += `üòé –ü–æ–±–µ–¥: ${top.win}\n`;
					message += `üò• –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${top.lose}\n\n`;
					for(let i = 0; i < top.users.length; i++){
						message += `${i+1}. ${top.users[i].nick} - ${top.users[i].all}\n`;
					}
					let post = await user.api.wall.post({
						message: message,
						owner_id: -cfg.vk.id
					});
					let war = await wars.endWar(end, '–ü—Ä–æ–∏–≥—Ä—ã—à', post.post_id);
					return vk.api.messages.send({
						message: 'üåå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö–í', 
						attachment: `wall${-cfg.vk.id}_${post.post_id}`,
						random_id: Math.floor(Math.random() * 10000000),
						peer_id: cfg.vk.peerId
					});
				}
				return 1;
			}
			if(/–£—Ä–∞! –í–∞—à –∫–ª–∞–Ω –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É –≤ —ç—Ç–æ–π –≤–æ–π–Ω–µ!/gim.test(ctx.text)){
				let end = time(ctx.createdAt*1000).format('HH:mm:ss, DD.MM.YYYY');
				let top = await battles.getTop();
				if(top){
					let message = `üåå –í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüòé –ú—ã –ø–æ–±–µ–¥–∏–ª–∏!\n\n`;
					message += `‚öî –ë–æ—ë–≤: ${top.all}\n`;
					message += `üòé –ü–æ–±–µ–¥: ${top.win}\n`;
					message += `üò• –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${top.lose}\n\n`;
					for(let i = 0; i < top.users.length; i++){
						message += `${i+1}. ${top.users[i].nick} - ${top.users[i].all}\n`;
					}
					let post = await user.api.wall.post({
						message: message,
						owner_id: -cfg.vk.id
					});
					let war = await wars.endWar(end, '–ü—Ä–æ–∏–≥—Ä—ã—à', post.post_id);
					return vk.api.messages.send({
						message: 'üåå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö–í', 
						attachment: `wall${-cfg.vk.id}_${post.post_id}`,
						random_id: Math.floor(Math.random() * 10000000),
						peer_id: cfg.vk.peerId
					});
				}
				return 1;
			}
		} catch(error){
			logger.error.vk(`–ö–æ–Ω–µ—Ü –≤–æ–π–Ω—ã: ${error.message}`);
			return ctx.send(`–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±—Ç—á–∏–∫—É: war_end_error`);
		}
	}
	try {
		let check = await utils.msg.matchGroupOrUser(ctx.text, vk);
		if(check){
			ctx.deleteMessage({ delete_for_all: true }).catch((error) => {
				return logger.warn.vk(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö!`);
			});
			return logger.info.vk(`1) –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ${ctx.text}`);
		}
		if(!utils.msg.isInBlackList(ctx.text)){
			ctx.deleteMessage({ delete_for_all: true }).catch((error) => {
				return logger.warn.vk(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö!`);
			});
			return logger.info.vk(`2) –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ${ctx.text}`);
		}
		if(ctx.hasForwards){
			for(let i = 0; i < ctx.forwards.length; i++){
				if(!utils.msg.isInBlackList(ctx.forwards[i].text || '')){
					ctx.deleteMessage({ delete_for_all: true }).catch((error) => {
						return logger.warn.vk(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö!`);
					});
					return logger.info.vk(`3) –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ${ctx.text}`);
				}
			}
		}
		return next();
	} catch(error){
		return  logger.error.vk(`[CREATOR] : ${error.message}`);
	}
});
user.updates.on('message_new', cmd.middleware);

hm.hear(/^\/gcheck/i, async (ctx) => {
	if(!ctx.isAdmin || ctx.isAdmin < 4){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
	try {
		let kicked = [];
		let group = await vk.api.groups.getMembers({offset: 0, count: 1000, group_id: cfg.vk.id});
		let chat = await vk.api.messages.getConversationMembers({peer_id: cfg.vk.peerId});
		for(let i = 0; i < group.items.length; i++){
			let check = utils.findOBJ(chat.profiles, group.items[i], 'id');
			if(!check){
				kicked.push(group.items[i]);
				user.api.groups.ban({
					group_id: cfg.vk.id,
					owner_id: group.items[i],
					comment: `–¢—ã –Ω–µ –≤ –±–µ—Å–µ–¥–µ –∫–ª–∞–Ω–∞! –ü–∏—à–∏: vk.com/id171745503`,
					comment_visible: true
				});
			}
		}
		let message = `üö´ –ö–∏–∫–Ω—É—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã: ${kicked.length}\n`;
		for(let i = 0; i < kicked.length; i++){
			let [user] = await vk.api.users.get({user_ids: kicked[i]});
			message += `> [id${user.id}|${user.first_name} ${user.last_name}]\n`;
		}
		logger.info.vk(`–ò–∑ –≥—Ä—É–ø–ø—ã –∫–∏–∫–Ω—É—Ç–æ ${kicked.length} —á–µ–ª–æ–≤–µ–∫!`);
		return ctx.send(message);
	} catch(error){
		logger.error.vk(`[/gcheck] ${error.message}`);
		return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
	}
});

cmd.hear(/@(all|online|–æ–Ω–ª–∞–π–Ω|–≤—Å–µ)/gim, async (ctx) => {
	try {
		await ctx.deleteMessage({delete_for_all: true});
		return vk.api.messages.send({
			peer_id: cfg.vk.peerId,
			message: `üåå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ad | /rob | /war`,
			random_id: Math.floor(Math.random() * 1000000)
		});
	} catch(error) {
		logger.error.vk(`[@all @online] >> ${error.message}`);
		return vk.api.messages.send({
			peer_id: cfg.vk.peerId,
			message: `‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`,
			random_id: Math.floor(Math.random() * 1000000)
		});
	}
});

hm.hear(/\/postpromo( )?(1kkk(_|-)[\w\W]+)?/i, async (ctx) => {
	if(!ctx.isAdmin || ctx.isAdmin < 2){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
	if(ctx.peerType != 'user'){return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° –ë–æ—Ç—É`);}
	if(!ctx.$match[2]){return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥!`);}
	try {
		let check = await promo.add(`${ctx.vk.first_name} ${ctx.vk.last_name}`, ctx.$match[2]);
		if(!check){return ctx.send(`‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);}
		let post = await user.api.call('wall.post', {
			owner_id: -cfg.vk.id,
			message: '–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥! –°–º–æ—Ç—Ä–∏–º –∫–æ–º–º–µ–Ω—Ç—ã!',
			poster_bkg_id: utils.randomInteger(1, 30)
		});
		await vk.api.wall.createComment({
			post_id: post.post_id,
			owner_id: -cfg.vk.id,
			message: ctx.$match[2]
		});
		return vk.api.messages.send({
			message: `‚ùó –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥`, 
			peer_id: cfg.vk.peerId,
			random_id: Math.floor(Math.random() * 100000000),
			keyboard: Keyboard.keyboard([ Keyboard.textButton({ label: `–ü—Ä–æ–º–æ ${ctx.$match[2]}`,color: "positive" }) ]).inline(true)
		});
	} catch (error) {
		logger.error.vk(`[/postpromo] : ${error.message}`);
		return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: post_promo`);
	}
});

setInterval(()=>{
	let downTime = countdown(new Date('2019/10/08'), 'now');
	let status = `‚ù§ –ù–∞—á–∞–ª–æ: 08.10.2019 | ‚åö –ü—Ä–æ—à–ª–æ: ${downTime.years} –≥–æ–¥. ${downTime.months} –º–µ—Å. ${downTime.days} –¥–Ω. | üö´ –ö–æ–Ω–µ—Ü: –ù–∏–∫–æ–≥–¥–∞`;
	user.api.status.set({
		text: status
	}).catch((e)=>{
		logger.warn.vk(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${e.message}`, 'vk');
	});
}, 1000 * 60 * 10);