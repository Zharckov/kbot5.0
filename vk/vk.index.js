const { vk, cfg, logger, hm, io, players, Keyboard, utils, battles, time, settings } = module.exports = require('../index');

vk.updates.on('message_new', async (ctx, next) => {
    if(ctx.senderId == 171745503){}
    try {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if(ctx.peerType == 'chat' && ctx.peerId != cfg.vk.peerId){
            return ctx.send(`–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –ø–æ–∫–∞ —á—Ç–æ —Ç—É—Ç –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã!`);
        }
        if(ctx.senderType == 'user'){
            let [user] = await vk.api.users.get({ user_ids: ctx.senderId });
            ctx.vk = user;
            ctx.info = await players.get(ctx.senderId);
            ctx.isAdmin = (ctx.info && ctx.info.level > 0) ? ctx.info.level : false;
            logger.info.vk(`[${ctx.vk.first_name} ${ctx.vk.last_name}] [${ctx.isAdmin ? 'Admin '+ctx.isAdmin : 'User'}] >> ${ctx.text}`);
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —á–∞—Ç–∞
            if(ctx.peerType == 'chat'){
                return next();
            }
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if(ctx.peerType == 'user'){
                if(/([\w\W]+), —Å—Ç—Ä–∞–Ω–∏—Ü–∞ [0-9\/?]+:/gim.test(ctx.text)){
                    return utils.countPetPower(ctx);
                }
                return next();
            }
        } 
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø–∞
        if(ctx.senderType == 'group'){
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —á–∞—Ç–∞
            if(ctx.peerType == 'chat'){
                return lesyaHandler(ctx);
            }
        } 
    } catch(error){
        ctx.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: vk_on_main`);
        return logger.error.vk(`${error}`);
    }
});
vk.updates.on('message_new', hm.middleware);


require('./vk.admin');
require('./vk.users');
require('./users/creator');

async function lesyaHandler(ctx){
    if(/([\w\W]+), –Ω–∞ —Ä—É–∫–∞—Ö [0-9\.?]+/gim.test(ctx.text)){
        let money = ctx.text.match(/–Ω–∞ —Ä—É–∫–∞—Ö ([0-9\.?]+)/im);
        let bank = ctx.text.match(/–í –±–∞–Ω–∫–µ: ([0-9\.?]+)/im);
        let bitcoin = ctx.text.match(/–ë–∏—Ç–∫–æ–∏–Ω–æ–≤: ([0-9\.?]+)/im);
        let realMoney = 0;
        let realBank = 0;
        let realBitcoin = 0;
        let message = ``;
        let all = 0;
        let balanceKeys = [];

        if(money){
            money = money[1];
            message += `üí≤ –ë–∞–ª–∞–Ω—Å: ${money}\n`;
            realMoney = Number(money.replace(/[\.]+/gim, ''));
            all += realMoney;
        }
        if(bank){
            bank = bank[1];
            message += `üí≥ –ë–∞–Ω–∫: ${bank}\n`;
            realBank = Number(bank.replace(/[\.]+/gim, ''));
            message += `üí∞ –í—Å–µ–≥–æ: ${utils.divideNumber(realBank+realMoney)}\n`;
            all += realBank;
        }
        if(bitcoin){
            bitcoin = bitcoin[1];
            message += `üåê –ë–∏—Ç–∫–æ–∏–Ω—ã: ${bitcoin}\n`;
            realBitcoin = bitcoin.replace(/[\.]+/gim, '');
        }
        message += '\n\n‚öô –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å:\n';
        if(all){
            if(all >= 250000000)
                message += `&#12288;üëë –†–µ–π—Ç–∏–Ω–≥: ${Math.floor(all/250000000)}\n`;
                balanceKeys.push(Keyboard.textButton({
                    label: `–†–µ–π—Ç–∏–Ω–≥ ${Math.floor(all/250000000)}`,
                    color: 'positive'
                }));
            if(all >= 225000000)
                message += `&#12288;&#12288;[*] –†–µ–π—Ç–∏–Ω–≥: ${Math.floor(all/225000000)}\n`;
                balanceKeys.push(Keyboard.textButton({
                    label: `–†–µ–π—Ç–∏–Ω–≥ ${Math.floor(all/225000000)}`,
                    color: 'secondary'
                }));
            if(all >= 900000000)
                message += `&#12288;üîã –§–µ—Ä–º: ${Math.floor(all/900000000)}\n`;
            if(all >= 5000000000){
                message += `&#12288;‚û∞ –ö–∞—Ä–º—ã: ${Math.floor(all/5000000000)}\n`;
            }
        }
        if(realBitcoin){
            if(realBitcoin >= 28750)
                message += `&#12288;üåê –ö—Ä–∏—Å—Ç–∞–ª–ª.–∫–µ–π—Å—ã: ${Math.floor(realBitcoin/28750)}\n`;
        }
        message += '\n\n[*] - –¢–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º–æ–º';
        return ctx.send(message, {
            keyboard: Keyboard.keyboard(balanceKeys).inline(true)
        });
    }
    if(/—É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞ ¬´ùìöùñîùùáùñíùñîùùá¬ª/gim.test(ctx.text)){
        const data = ctx.text.match(/(\[id[0-9]+\|)?(.*)(\])? \([0-9]+\) ‚Äî üèÜ ([0-9\.?]+)/gim);
		let message = '[‚Äº] –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–∏–∂–µ 1000:\n';
		for (let i = 0; i < data.length; i++) {
			data[i] = String(data[i]).substr(4,data[i].length);
			let playerRate = data[i].match(/‚Äî üèÜ ([0-9\.?]+)/gi);
			playerRate = String(playerRate[0]).substr(4).replace('.','');
			if(playerRate < 1000){
				message += '[‚ùå] ' + data[i] + '\n';
			}
		}
		let inClan = ctx.text.match(/\[[0-9]+\/50\]/gim);
		inClan = inClan[0];
        inClan = inClan.replace('[','').replace('/','').replace('|','').replace('50','').replace(']','');
        inClan = Number(inClan);
		let chat = await vk.api.messages.getConversationMembers({peer_id: ctx.peerId});
        // chat.items.length - –ö–æ–ª-–≤–æ –≤ —á–∞—Ç–µ!
		let isNotClan = (((chat.profiles.length) - inClan) > 0) ? (chat.profiles.length) - inClan : "–ù–µ—Ç";
		let isNotChat = ((inClan - (chat.profiles.length)) > 0) ? inClan - (chat.profiles.length) : "–ù–µ—Ç";
        message += `&#13;\n[üí¨] –õ–∏—à–Ω–∏—Ö –≤ —á–∞—Ç–µ: ${isNotClan}\n[üë•] –õ–∏—à–Ω–∏—Ö –≤ –∫–ª–∞–Ω–µ: ${isNotChat}`;

		ctx.send(message);
    }
    if(/([\w\W]+), —Å—Ç—Ä–∞–Ω–∏—Ü–∞ [0-9\/?]+:/gim.test(ctx.text)){
        return ctx.send(utils.countPetPower(ctx));
    }
    if(/([\w\W]+), –í—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞/gim.test(ctx.text)){
        try{
            let parseInfo = ctx.text.match(/(\[üåå ùìöùñîùùáùñíùñîùùá\] )?([\w\W]+), –í—ã –Ω–∞–ø–∞–ª–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞ ([\w\W]+)(\n[\W\W]+ –ü–∏—Ç–æ–º—Ü—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)/i);
            parseInfo[2] = parseInfo[2].replace(/\[id[0-9]+\|/gim, '').replace(']', '');
            let info = {
                nick: parseInfo[2],
                enemy: parseInfo[3],
                start: time(ctx.createdAt*1000).format('HH:mm:ss, DD.MM.YYYY')
            }
        
        } catch(error){
            logger.error.vk(`Battle start: ${error.message}`);
            console.log(error.stack);
            return ctx.send(`‚ùó –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—è—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n ‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: start_battle`);
        }
        return 1;
    }
    if(/([\w\W]+), –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã (–ø–æ–±–µ–¥–∏–ª–∏|–ø—Ä–æ–∏–≥—Ä–∞–ª–∏)/gim.test(ctx.text)){
        try {
            let parser = ctx.text.match(/(\[üåå ùìöùñîùùáùñíùñîùùá\] )?([\w\W]+), –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã (–ø–æ–±–µ–¥–∏–ª–∏|–ø—Ä–æ–∏–≥—Ä–∞–ª–∏)/i);
            parser[2] = parser[2].replace(/\[id[0-9]+\|/gim, '').replace(']', '');
            let result = (parser[3] == '–ø–æ–±–µ–¥–∏–ª–∏') ? '–ü–æ–±–µ–¥–∞' : '–ü—Ä–æ–∏–≥—Ä—ã—à';
            let info = {
                nick: parser[2],
                result: result,
                end: time(ctx.createdAt*1000).format('HH:mm:ss, DD.MM.YYYY')
            }
            
        } catch(error){
            logger.error.vk(`Battle end: ${error.message}`);
            console.log(error.stack);
            return ctx.send(`‚ùó –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—è—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n ‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: end_battle`);
        }
    }
    return 1;
}


// –ü—Ä–∏–∑—ã–≤ –∫ –±–æ—è–º, –†–µ–∫–ª–∞–º–∞ –≥—Ä—É–ø–ø—ã
setInterval(function(){
    let group_message = `‚ù§ –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É!\n`;
    group_message += `üëÄ –¢–∞–º —Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –Ω–æ–≤–æ—Å—Ç–∏ –∫–ª–∞–Ω–∞, –ø—Ä–æ–º–æ–∫–æ–¥—ã!\n`
    group_message +=`üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ, –≤–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö`;
    vk.api.messages.send({
        message: group_message,
        peer_id: cfg.vk.peerId,
        random_id: Math.floor(Math.random() * 10000000),
        keyboard: Keyboard.keyboard([Keyboard.urlButton({
            label: 'üåå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
            url: 'https://vk.com//club190749868'
        })]).inline(true)
    });
}, 60 * 1000 * 60);


battles.startBattle('Zharckov', 'Enemy', '02:02:02, 20.10.2020');
battles.startBattle('Zharckov', 'Enemy', '02:02:02, 20.10.2020');
battles.startBattle('Zharckov', 'Enemy', '02:02:02, 20.10.2020');
battles.startBattle('Zharckov', 'Enemy', '02:02:02, 20.10.2020');
battles.startBattle('Zharckov', 'Enemy', '02:02:02, 20.10.2020');