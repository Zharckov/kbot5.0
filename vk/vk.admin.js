const { 
    hm, cfg, logger, players,
    vk, Keyboard, settings, keys,
    battles, utils, creator, promo,
    premium, time, wars, LEVELS
}           = require('./vk.index');
const fs    = require('fs');
const os    = require('os');
const exec  = require('child_process').exec;

let premium_cmd_timer = 0;

hm.hear(/^\/ad( )?([\w\W]+)?/i, async (ctx) => {
    if(!ctx.isAdmin){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`); }
    try {
        let chatMembers = await vk.api.messages.getConversationMembers({ peer_id: cfg.vk.peerId });
        let message = ``;
        let online = 0;
        for(let i = 0; i < chatMembers.profiles.length; i++){
            message += `[id${chatMembers.profiles[i].id}|&#8203;]`;
            online += (chatMembers.profiles[i].online) ? 1 : 0;
        }
        message += `üë• –û–Ω–ª–∞–π–Ω: ${online}\n`;
        message += (ctx.$match[2]) ? `‚ö† –û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${ctx.$match[2]}` : '‚ö† –û–±—ä—è–≤–ª–µ–Ω–∏–µ';
        return ctx.send(message);
    } catch(error) {
        logger.error.vk(`VK: /ad: ${error.message}`);
        return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
    }
});

hm.hear(/^\/rob/i, async (ctx) => {
    if(!ctx.isAdmin){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`); }
    try {
        let message = ``;
        let members = await vk.api.messages.getConversationMembers({ peer_id: cfg.vk.peerId });
        let online = 0;
        for(let i = 0; i < members.profiles.length; i++){
            message += `[${members.profiles[i].screen_name}|&#8203;]`;
            online += (members.profiles[i].online) ? 1 : 0;
        }
        message += `üë• –û–Ω–ª–∞–π–Ω: ${online}\n`;
        message += `üí∞ –ó–∞–∫—É–ø–∞–µ–º—Å—è –Ω–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ!`;
        return ctx.send(message, {
            keyboard: Keyboard.keyboard([
                Keyboard.textButton({label: '–ü—Ä–µ–¥–º–µ—Ç—ã', color: "positive"})
            ]).inline(true)
        });
    } catch(error) {
        logger.error.vk(`VK: /rob: ${error.message}`);
        return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
    }
});

hm.hear(/^\/war$/i, async (ctx) => {
    if(!ctx.isAdmin){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`); }
    try {
        let message = ``;
        let members = await vk.api.messages.getConversationMembers({ peer_id: cfg.vk.peerId });
        let online = 0;
        for(let i = 0; i < members.profiles.length; i++){
            message += `[${members.profiles[i].screen_name}|&#8203;]`;
            online += (members.profiles[i].online) ? 1 : 0;
        }
        message += `üë• –û–Ω–ª–∞–π–Ω: ${online}\n`;
        message += `üí∞ –£—á–∞—Å—Ç–≤—É–µ–º –≤ –±–æ—è—Ö!`;
        return ctx.send(message, {
            keyboard: Keyboard.keyboard([
                Keyboard.textButton({label: '–ë–æ–π', color: "positive"})
            ]).inline(true)
        });
    } catch(error) {
        logger.error.vk(`[/war]: ${error.message}`);
        return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: admin_war`);
    }
});

hm.hear(/^\/stuff( )(add|delete)( )?([0-4]+)?/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 4){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
    if(!ctx.hasReplyMessage){ return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: /stuff [*add|delete] [*0-4] —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å!`);}
    if(ctx.replyMessage.senderId < 0){ return ctx.send(`‚ùó –ó–∞—á–µ–º –±–æ—Ç—É –∞–¥–º–∏–Ω–∫–∞?`); }
    if(ctx.replyMessage.senderId == ctx.senderId){ return ctx.send(`‚ùó –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ —É—Ä–æ–≤–µ–Ω—å!`);}
    try {
        switch(ctx.$match[2]){
            case 'add': { 
                if(!ctx.$match[4]){ return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`); }
                if(Number(ctx.$match[4]) > 5 || Number(ctx.$match[4]) < 0){return ctx.send(`‚ùó –£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à—å 0 –∏ –±–æ–ª—å—à–µ 5!`);}
                let user = await players.changeLevel(ctx.replyMessage.senderId, ctx.$match[4]);
                if(user.error){ return ctx.send(`‚ùó –û—à–∏–±–∫–∞: ${user.message}!`);}
                let info = await vk.api.users.get({ user_ids: user.user.vkId });
                return ctx.send(`üåå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id${user.user.vkId}|${info[0].first_name} ${info[0].last_name}] –≤—ã–¥–∞–Ω ${ctx.$match[4]} —É—Ä–æ–≤–µ–Ω—å!`);
            }
            case 'delete': {
                let user = await players.changeLevel(ctx.replyMessage.senderId, 0);
                if(user.error){ return ctx.send(`‚ùó –û—à–∏–±–∫–∞: ${user.message}!`); }
                let info = await vk.api.users.get({ user_ids: user.user.vkId });
                return ctx.send(`üåå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id${user.user.vkId}|${info[0].first_name} ${info[0].last_name}] —Å–Ω—è—Ç –¥–æ—Å—Ç—É–ø!`);
                break; 
            }
        }
    } catch(error){
        logger.error.vk(`VK: /stuff: ${error.message}`);
        return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: vk_reg`);
    }
});

hm.hear(/^\/sad( )?([\w\W]+)?/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 2){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`); }
    try {
        let admins = await players.getAdmins();
        if(admins){
            let message = ``;
            let online = 0;
            for(let i = 0; i < admins.length; i++){
                let [user] = await vk.api.users.get({ user_ids: admins[i].vkId });
                message += `[id${admins[i].vkId}|&#8203;]`;
                online += (user.online) ? 1 : 0;
            }
            message += `‚öô –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö\n`;
            message += `üë• –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –æ–Ω–ª–∞–π–Ω: ${online}\n`;
            message += (ctx.$match[2]) ? `‚ö† –û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${ctx.$match[2]}` : '‚ö† –û–±—ä—è–≤–ª–µ–Ω–∏–µ';
            return ctx.send(message);
        } else {
            return ctx.send(`‚ùó –£–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –Ω–µ—Ç!`);
        }
    } catch(error) {
        logger.error.vk(`VK: /ad: ${error.message}`);
        return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
    }
});

hm.hear(/^\/textad( )([\w\W\n]+)/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 3){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`)}
    try{
        await settings.adText(ctx.$match[2]);
        return ctx.send(`‚öô –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
    } catch(error){
        logger.error.vk(`[/textad] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: set_textad_link`);
    }
});

hm.hear(/^\/lesya( )([\w\W\n]+)/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 3){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`)}
    try{
        await settings.lesyaLink(ctx.$match[2]);
        return ctx.send(`‚öô –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`);
    } catch(error){
        logger.error.vk(`[/lesya] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: set_lesya_link`);
    }
});

hm.hear(/^\/link( )([\w\W\n]+)/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 3){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`)}
    try{
        await settings.chatLink(ctx.$match[2]);
        return ctx.send(`‚öô –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–µ—Å–µ–¥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`);
    } catch(error){
        logger.error.vk(`[/link] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: set_link_chat`);
    }
});

hm.hear(/^\/logs( )?(vk|http|app)?( )?(warn|info|error|message)?/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 3){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
    if(!ctx.$match[2]){ return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ —Ä–æ–¥ –ª–æ–≥–æ–≤ (vk | http | app)`);}
    if(!ctx.$match[4]){ return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ (warn | info | error | message)`);}
    try {
        let logs = await logger.getLastTenLogs(ctx.$match[2], ctx.$match[4]);
        logs = logs.reverse();
        let message = `‚öô –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ [${ctx.$match[2]} > ${ctx.$match[4]}]:\n`;
        for(let item of logs){
            message += `[${item.date}]: ${item.text}\n`; 
        }
        return ctx.send(message);
    } catch (error) {
        logger.error.vk(`[/logs] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: get_logs`);
    }
});

hm.hear(/^\/norm( )?([0-9]+)?/i, async (ctx) => {
    try {
        if(!ctx.isAdmin || ctx.isAdmin < 1){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
        if(!ctx.$match[2]){ return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–æ—Ä–º—É: 10 - 40`);}
        if(Number(ctx.$match[2]) > 40 || Number(ctx.$match[2]) < 10){
            return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–æ—Ä–º—É: 10 - 40`);
        }
        let day = await battles.addBattleDayOrChangeNorm(Number(ctx.$match[2]))
        if(day.isNewDay){
            return ctx.send(`‚öô –ù–æ—Ä–º–∞ –±–æ—ë–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${ctx.$match[2]}!\nüëäüèª –¢–µ–ø–µ—Ä—å –±–æ–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è!`);
        } else {
            return ctx.send(`‚öô –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –±–æ—ë–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${ctx.$match[2]}!`);
        }
    } catch(error){
        logger.error.vk(`[/norm] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: set_battle_norm`);
    }
});

hm.hear(/^\/check/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 2){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
    let uptime = utils.formatUptime(process.uptime());
    let info = JSON.parse(fs.readFileSync('./package.json'));
    let used = Math.round(process.memoryUsage().heapUsed / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let total = Math.round(process.memoryUsage().heapTotal / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let rss = Math.round(process.memoryUsage().rss / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let ext = Math.round(process.memoryUsage().external / 1024 / 1024 * 100) / 100 + ' –ú–±';
    let ping = (time() - time(ctx.createdAt*1000))/1000;
    let OSMF = Math.round(os.freemem() / 1024 / 1024 / 1024 * 100) / 100;
    let OSMT = Math.round(os.totalmem() / 1024 / 1024 / 1024 * 100) / 100;
    let message = `‚öô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n`;
    message += `> Version: ${info.version}\n`;
    message += `> Name: KBot\n\n`;
    message += `> Time: ${time().format('HH:mm:ss')}\n`;
    message += `> Date: ${time().format('DD.MM.YYYY')}\n`;
    message += `> Uptime: ${uptime}\n`;
    message += `> Ping: ${ping} —Å–µ–∫\n\n`;
    message += `> Used: ${used}\n`;
    message += `> Total: ${total}\n`;
    message += `> RSS: ${rss}\n`;
    message += `> EXT: ${ext}\n\n`;
    message += `> OSMU: ${(OSMT - OSMF).toFixed(2)} –ì–±\n`;
    message += `> OSMF: ${OSMF} –ì–±\n`;
    message += `> OSMT: ${OSMT} –ì–±\n`;
    return ctx.send(message);
});

hm.hear(/^\/stats( )?([0-9\.?]+)?/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 1){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
    try {
        let stats = await battles.getDay(ctx.$match[2] || false);
        let message = ``;
        if(stats.data){
            let battle = stats.data;
            message += `üåå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—ë–≤ –∑–∞ ${ctx.$match[2] || '—Å–µ–≥–æ–¥–Ω—è'}:\n`;
            let norm = 0;
            for(let i = 0; i < battle.users.length; i++){
                if(battle.users[i].all >= battle.norm)
                    norm++
            }
            message += `‚öô –ù–æ—Ä–º–∞: ${battle.norm}\n`;
            message += `‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏: ${norm}\n\n`;
            message += `‚öî –í—Å–µ–≥–æ: ${battle.all}\n`;
            message += `üòé –ü–æ–±–µ–¥: ${battle.win}\n`;
            message += `üò•  –ü–æ—Ä–∞–∂–µ–Ω–∏–π: ${battle.lose}\n\n`;
            for(let i = 0; i < battle.users.length; i++){
                message += `> ${battle.users[i].nick} - ${battle.users[i].all}\n`;
            }
        } else {
            if(stats.code == 'DATE_NOT_FOUND')
                message += `‚ùó –ë–æ—ë–≤ –∑–∞ ${ctx.$match[2] || '—Å–µ–≥–æ–¥–Ω—è'} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`;
        }
        return ctx.send(message);
    } catch(error) {
        logger.error.vk(`[/stats] >> ${error.message}`);
        return ctx.send(`‚ùó –£–ø—Å... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: battle_stats_get`);
    }
});

hm.hear(/^\/gcheck/i, async (ctx) => {
	if(!ctx.isAdmin || ctx.isAdmin < 4){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
	try {
		let kicked = [];
		let group = await vk.api.groups.getMembers({offset: 0, count: 1000, group_id: cfg.vk.id});
		let chat = await vk.api.messages.getConversationMembers({peer_id: cfg.vk.peerId});
		for(let i = 0; i < group.items.length; i++){
			let check = utils.findOBJ(chat.profiles, group.items[i], 'id');
			if(!check){
				kicked.push(group.items[i]);
				creator.api.groups.ban({
					group_id: cfg.vk.id,
					owner_id: group.items[i],
					comment: `–¢—ã –Ω–µ –≤ –±–µ—Å–µ–¥–µ –∫–ª–∞–Ω–∞! –ü–∏—à–∏: vk.com/id171745503`,
					comment_visible: true
				});
			}
		}
		let message = `üö´ –ö–∏–∫–Ω—É—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã: ${kicked.length}\n`;
		for(let i = 0; i < kicked.length; i++){
			let [user] = await vk.api.users.get({user_ids: kicked[i]});
			message += `> [id${user.id}|${user.first_name} ${user.last_name}]\n`;
		}
		logger.info.vk(`–ò–∑ –≥—Ä—É–ø–ø—ã –∫–∏–∫–Ω—É—Ç–æ ${kicked.length} —á–µ–ª–æ–≤–µ–∫!`);
		return ctx.send(message);
	} catch(error){
		logger.error.vk(`[/gcheck] ${error.message}`);
		return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`);
	}
});

hm.hear(/\/postpromo( )?(1kkk(_|-)[\w\W]+)?/i, async (ctx) => {
	if(!ctx.isAdmin || ctx.isAdmin < 2){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
	if(ctx.peerType != 'user'){return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° –ë–æ—Ç—É`);}
	if(!ctx.$match[2]){return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥!`);}
	try {
		let check = await promo.add(`${ctx.vk.first_name} ${ctx.vk.last_name}`, ctx.$match[2]);
		if(!check){return ctx.send(`‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);}
		let post = await creator.api.call('wall.post', {
			owner_id: -cfg.vk.id,
			message: '–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥! –°–º–æ—Ç—Ä–∏–º –∫–æ–º–º–µ–Ω—Ç—ã!',
			poster_bkg_id: utils.randomInteger(1, 30)
		});
		await vk.api.wall.createComment({
			post_id: post.post_id,
			owner_id: -cfg.vk.id,
			message: ctx.$match[2]
		});
		return ctx.send(`‚ùó –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥`, {
            peer_id: cfg.vk.peerId,
			keyboard: Keyboard.keyboard([ Keyboard.textButton({ label: `–ü—Ä–æ–º–æ ${ctx.$match[2]}`,color: "positive" }) ]).inline(true)
		});
	} catch (error) {
		logger.error.vk(`[/postpromo] : ${error.message}`);
		return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–¥: post_promo`);
	}
});

hm.hear(/^\/keys/i, (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 3){return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`)}
    return ctx.send(`‚öô –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`, {
        keyboard: Keyboard.keyboard(keys.chat)
    });
});

hm.hear(/\/get( )?([\w\W]+)?/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 3){
        return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);
    }
    if(premium_cmd_timer >= new Date().getTime()){
        let time_to_write = (premium_cmd_timer - new Date().getTime())/1000;
        return ctx.send(`‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 10 —Å–µ–∫!\n‚ùó –û—Å—Ç–∞–ª–æ—Å—å: ${time_to_write > 0 ? time_to_write : 0} —Å–µ–∫`);
    }
    if(!ctx.$match[2]){
        return ctx.send(`‚ùó –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É!`);
    }
    premium_cmd_timer = new Date().getTime() + 10 * 1000;
    return premium.api.messages.send({
        message :   `/–≥–µ—Ç ${ctx.$match[2]}`,
        peer_id:    cfg.vk.users.premium.peerId,
        random_id:  Math.floor(Math.random()*100000000)
    });
});

hm.hear(/\/restart/i, (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 4){
        return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);
    }
    return exec('pm2 restart 0');
});

hm.hear(/\/player( )?([\w\W]+)?/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 2){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
    if(!ctx.$match[2]){return ctx.send(`‚ùó –í–≤–µ–¥–∏—Ç–µ VK —Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID!`)}
    try {
        ctx.$match[2] = ctx.$match[2].replace(/http(s)?:\/\/vk.com\//, '');
        ctx.$match[2] = ctx.$match[2].replace('@', '');
        ctx.$match[2] = ctx.$match[2].replace(/\[/gim, '').replace(/\|[\w\W]+\]/gim, '');
        let info = await vk.api.utils.resolveScreenName({screen_name: ctx.$match[2]});
        if(!info){return ctx.send(`‚ùó –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Å—ã–ª–∫—É!`);}
        if(info.type != 'user'){ return ctx.send(`‚ùó –£ –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—è!`);}
        let user = await players.get(info.object_id);
        if(!user){return ctx.send(`‚öô [id${info.object_id}|–ò–≥—Ä–æ–∫] –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!`);}
        let message = `üåå –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ ${ctx.info.nick}\n`;
        message += `‚öô VK: ${user.vkId}\n`;
        message += `‚öô Lesya: ${user.lesya}\n`;
        message += `${LEVELS[user.level]} –£—Ä–æ–≤–µ–Ω—å: ${user.level}\n\n`;
        message += `‚öî –ë–æ–∏ (–í—Å–µ –≤—Ä–µ–º—è):\n`;
        message += `&#12288;üëäüèª –í—Å–µ–≥–æ: ${user._all}\n`;
        message += `&#12288;üòé –ü–æ–±–µ–¥: ${user._win}\n`;
        message += `&#12288;üò• –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: ${user._lose}\n\n`;
        let u_battle = await battles.getUser(user.nick);
        if(u_battle.data){
            message += `‚öî –ë–æ–∏: (–ó–∞ —Å–µ–≥–æ–¥–Ω—è):\n`;
            message += `&#12288;üëäüèª –í—Å–µ–≥–æ: ${u_battle.data.all}\n`;
            message += `&#12288;üòé –ü–æ–±–µ–¥: ${u_battle.data.win}\n`;
            message += `&#12288;üò• –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: ${u_battle.data.lose}\n`;
        } else {
            message += `‚öî –ë–æ–∏: (–ó–∞ —Å–µ–≥–æ–¥–Ω—è):\n`;
            if(u_battle.code == 'USER_NOT_FOUND')
                message += `&#12288;üö´ –°–µ–≥–æ–¥–Ω—è –∏–≥—Ä–æ–∫ –Ω–µ –∏–≥—Ä–∞–ª!`;
            if(u_battle.code == 'DATE_NOT_FOUND')
                message += `&#12288;üö´ –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –±–æ—ë–≤!`;
        }
        return ctx.send(message);
    } catch(error){
        logger.error.vk(`[/player]: ${error.message}`);
        return ctx.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: player_get_error`);
    }
});

hm.hear(/\/users/i, async (ctx) => {
    if(!ctx.isAdmin || ctx.isAdmin < 2){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`);}
    try {
        let users = await players.getAll();
        if(!users){return ctx.send(`‚ùó –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!`);}
        let message = `‚öô –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n\n`;
        for(let i = 0; i < users.length; i++){
            let [info] = await vk.api.users.get({user_ids: users[i].vkId});
            message += `${i+1}. ${info.first_name[0]}. ${info.last_name} | ${users[i].nick} | ${users[i].lesya}\n`;
        }
        return ctx.send(message);
    } catch(error){
        logger.error.vk(`[/users]: ${error.message}`);
        return ctx.send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: users_get_error`);
    }
});

hm.hear(/\/wars/i, async (ctx) => {
    if(!ctx.isAdmin){ return ctx.send(`‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`); }
    try { 
        let data = await wars.getWars(); 
        if(data) {
            let message = `‚öî –ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã:\n`;
            message += `‚úÖ - –ü–æ–±–µ–¥–∞\nüö´-–ü–æ—Ä–∞–∂–µ–Ω–∏–µ\n\n`;
            for(let i = 0; i < data.length; i++){
                message += (data[i].result == '–ü–æ–±–µ–¥–∞') ? '‚úÖ | ' : 'üö´ | ';
                message += `${data[i].date} | ${data[i].enemy}\n`;
            }
            return ctx.send(message);
        } else {
            return ctx.send(`‚ùó –ö–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`)
        }
    } catch(error) {
        logger.error.vk(`[/wars]: ${error.message}`);
        return ctx.send(`‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: war_get_error`);
    }
});